// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// TODO: User accounts mapped from Clerk
/// TODO: User permissions/grants

model Team {
  id                           Int                           @id @default(autoincrement())
  uid                          String                        @unique @default(cuid())
  name                         String                        @unique
  logo                         Image?                        @relation(fields: [logoUid], references: [uid])
  logoUid                      String?
  blog                         String?
  officeHours                  String?
  website                      String?
  contactMethod                String?
  twitterHandler               String?
  linkedinHandler              String?
  telegramHandler              String?
  shortDescription             String?
  longDescription              String?
  plnFriend                    Boolean                       @default(false)
  airtableRecId                String?                       @unique
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  lastModifiedBy               String?
  lastModifier                 Member?                       @relation("LastModification", fields: [lastModifiedBy], references: [uid])
  teamMemberRoles              TeamMemberRole[]
  industryTags                 IndustryTag[]
  membershipSources            MembershipSource[]
  fundingStage                 FundingStage?                 @relation(fields: [fundingStageUid], references: [uid])
  fundingStageUid              String?
  technologies                 Technology[]
  moreDetails                  String?
  maintainingProjects          Project[]                     @relation("maintainingTeam")
  contributingProjects         Project[]                     @relation("contributingTeams")
  eventGuests                  PLEventGuest[]
  teamFocusAreas               TeamFocusArea[]
  teamFocusAreasVersionHistory TeamFocusAreaVersionHistory[]
}

model Member {
  id                           Int                           @id @default(autoincrement())
  uid                          String                        @unique @default(cuid())
  name                         String
  email                        String?                       @unique
  image                        Image?                        @relation(fields: [imageUid], references: [uid])
  imageUid                     String?
  githubHandler                String?
  discordHandler               String?
  twitterHandler               String?
  linkedinHandler              String?
  telegramHandler              String?
  officeHours                  String?
  moreDetails                  String?
  plnFriend                    Boolean                       @default(false)
  plnStartDate                 DateTime?
  airtableRecId                String?                       @unique
  externalId                   String?                       @unique
  openToWork                   Boolean?                      @default(false)
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  skills                       Skill[]
  location                     Location?                     @relation(fields: [locationUid], references: [uid])
  locationUid                  String?
  teamMemberRoles              TeamMemberRole[]
  memberRoles                  MemberRole[]
  preferences                  Json?
  projectContributions         ProjectContribution[]
  createdProjects              Project[]
  eventGuests                  PLEventGuest[]
  teamFocusAreasVersionHistory TeamFocusAreaVersionHistory[]
  modifiedTeams                Team[]                        @relation("LastModification")
}

model MemberRole {
  id        Int      @id @default(autoincrement())
  uid       String   @unique @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   Member[]
}

enum ParticipantType {
  MEMBER
  TEAM
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  AUTOAPPROVED
}

model ParticipantsRequest {
  id               Int             @id @default(autoincrement())
  uid              String          @unique @default(cuid())
  participantType  ParticipantType
  status           ApprovalStatus  @default(PENDING)
  oldData          Json?
  newData          Json
  referenceUid     String?
  requesterEmailId String
  uniqueIdentifier String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Skill {
  id          Int      @id @default(autoincrement())
  uid         String   @unique @default(cuid())
  title       String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  members     Member[]
}

model Location {
  id                 Int      @id @default(autoincrement())
  uid                String   @unique @default(cuid())
  // On the location-transfer.service.ts we are adding the metroArea to the placeId to avoid duplicates because
  // since the metroArea is not valid on the Google Places API we need to append this field to avoid rewriting the same location
  placeId            String   @unique
  city               String?
  country            String
  continent          String
  region             String?
  regionAbbreviation String?
  metroArea          String?
  latitude           Float
  longitude          Float
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  members            Member[]

  @@unique([continent, country, region, city, metroArea, latitude, longitude])
}

model TeamMemberRole {
  id        Int       @id @default(autoincrement())
  mainTeam  Boolean   @default(false)
  teamLead  Boolean   @default(false)
  startDate DateTime?
  endDate   DateTime?
  role      String?
  member    Member    @relation(fields: [memberUid], references: [uid], onDelete: Cascade)
  memberUid String
  team      Team      @relation(fields: [teamUid], references: [uid], onDelete: Cascade)
  teamUid   String
  roleTags  String[]

  // One member can only have one role per team
  @@unique([memberUid, teamUid])
}

model IndustryCategory {
  id           Int           @id @default(autoincrement())
  uid          String        @unique @default(cuid())
  title        String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  industryTags IndustryTag[]
}

model IndustryTag {
  id                  Int               @id @default(autoincrement())
  uid                 String            @unique @default(cuid())
  title               String            @unique
  definition          String?
  airtableRecId       String?           @unique
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  industryCategory    IndustryCategory? @relation(fields: [industryCategoryUid], references: [uid])
  industryCategoryUid String?
  teams               Team[]
}

model FundingStage {
  id        Int      @id @default(autoincrement())
  uid       String   @unique @default(cuid())
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teams     Team[]
}

model MembershipSource {
  id        Int      @id @default(autoincrement())
  uid       String   @unique @default(cuid())
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teams     Team[]
}

model Technology {
  id        Int      @id @default(autoincrement())
  uid       String   @unique @default(cuid())
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teams     Team[]
}

model Image {
  id             Int       @id @default(autoincrement())
  uid            String    @unique @default(cuid())
  // The cid is not unique because this id represents an array of multiple images
  // with different sizes that can be accessed trough the cid and filename
  cid            String
  width          Int
  height         Int
  url            String
  filename       String
  size           Int
  type           String
  version        ImageSize
  // This image can be a thumbnail to other image
  thumbnailToUid String?
  thumbnailTo    Image?    @relation("ImageThumbnails", fields: [thumbnailToUid], references: [uid])
  // This image can have multiple thumbnails
  thumbnails     Image[]   @relation("ImageThumbnails")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  // Reverse Relations:
  Team           Team[]
  Member         Member[]
  Project        Project[]
  eventLogo      PLEvent[] @relation("logo")
  eventBanner    PLEvent[] @relation("banner")
}

model Faq {
  id        Int      @id @default(autoincrement())
  uid       String   @unique @default(cuid())
  email     String   @db.VarChar(100)
  question  String
  type      String
  requestIp String   @db.VarChar(35)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JoinRequest {
  id           Int      @id @default(autoincrement())
  uid          String   @unique @default(cuid())
  email        String   @db.VarChar(100)
  introduction String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ProjectContribution {
  id             Int       @id @default(autoincrement())
  uid            String    @unique @default(cuid())
  role           String?
  description    String?
  currentProject Boolean?  @default(false)
  startDate      DateTime?
  endDate        DateTime?
  memberUid      String
  member         Member?   @relation(fields: [memberUid], references: [uid])
  projectUid     String
  project        Project?  @relation(fields: [projectUid], references: [uid])

  @@unique([memberUid, projectUid])
}

model Project {
  id                 Int                   @id @default(autoincrement())
  uid                String                @unique @default(cuid())
  logo               Image?                @relation(fields: [logoUid], references: [uid])
  logoUid            String?
  name               String
  tagline            String
  description        String
  contactEmail       String?
  lookingForFunding  Boolean               @default(false)
  projectLinks       Json?
  kpis               Json?
  readMe             String?
  score              Int?
  creator            Member?               @relation(fields: [createdBy], references: [uid])
  createdBy          String
  maintainingTeam    Team?                 @relation("maintainingTeam", fields: [maintainingTeamUid], references: [uid])
  maintainingTeamUid String
  contributingTeams  Team[]                @relation("contributingTeams")
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  isDeleted          Boolean               @default(false)
  projectFocusAreas  ProjectFocusArea[]
  contributions      ProjectContribution[]
}

model PLEvent {
  id          Int            @id @default(autoincrement())
  uid         String         @unique @default(cuid())
  eventsCount Int?
  telegramId  String?
  logoUid     String?
  logo        Image?         @relation("logo", fields: [logoUid], references: [uid])
  bannerUid   String?
  banner      Image?         @relation("banner", fields: [bannerUid], references: [uid])
  name        String
  description String?
  websiteURL  String?
  slugURL     String         @unique
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  eventGuests PLEventGuest[]
}

model PLEventGuest {
  id         Int      @id @default(autoincrement())
  uid        String   @unique @default(cuid())
  telegramId String?
  reason     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  memberUid  String
  member     Member   @relation(fields: [memberUid], references: [uid], onDelete: Cascade)
  teamUid    String
  team       Team     @relation(fields: [teamUid], references: [uid], onDelete: Cascade)
  eventUid   String
  event      PLEvent  @relation(fields: [eventUid], references: [uid], onDelete: Cascade)
}

model FocusArea {
  id                          Int                           @id @default(autoincrement())
  uid                         String                        @unique @default(cuid())
  title                       String                        @unique
  description                 String?
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  parentUid                   String?
  parent                      FocusArea?                    @relation("parentAreas", fields: [parentUid], references: [uid])
  children                    FocusArea[]                   @relation("parentAreas")
  teamFocusAreas              TeamFocusArea[]               @relation("teamFocusAreas")
  teamAncestorFocusAreas      TeamFocusArea[]               @relation("teamAncestorFocusAreas")
  projectFocusAreas           ProjectFocusArea[]            @relation("projectFocusAreas")
  projectAncestorFocusAreas   ProjectFocusArea[]            @relation("projectAncestorFocusAreas")
  focusAreas                  FocusAreaHierarchy[]          @relation("focusAreas")
  subFocusAreas               FocusAreaHierarchy[]          @relation("subfocusAreas")
  TeamFocusAreaVersionHistory TeamFocusAreaVersionHistory[]
}

model TeamFocusArea {
  id              Int       @id @default(autoincrement())
  teamUid         String
  team            Team      @relation(fields: [teamUid], references: [uid], onDelete: Cascade)
  focusAreaUid    String
  focusArea       FocusArea @relation("teamFocusAreas", fields: [focusAreaUid], references: [uid], onDelete: Cascade)
  ancestorAreaUid String
  ancestorArea    FocusArea @relation("teamAncestorFocusAreas", fields: [ancestorAreaUid], references: [uid], onDelete: Cascade)

  @@unique([focusAreaUid, teamUid, ancestorAreaUid])
}

model ProjectFocusArea {
  id              Int       @id @default(autoincrement())
  projectUid      String
  project         Project   @relation(fields: [projectUid], references: [uid], onDelete: Cascade)
  focusAreaUid    String
  focusArea       FocusArea @relation("projectFocusAreas", fields: [focusAreaUid], references: [uid], onDelete: Cascade)
  ancestorAreaUid String
  ancestorArea    FocusArea @relation("projectAncestorFocusAreas", fields: [ancestorAreaUid], references: [uid], onDelete: Cascade)

  @@unique([focusAreaUid, projectUid, ancestorAreaUid])
}

model FocusAreaHierarchy {
  id              Int       @id @default(autoincrement())
  isDirect        Boolean
  focusAreaUid    String
  focusArea       FocusArea @relation("focusAreas", fields: [focusAreaUid], references: [uid], onDelete: Cascade)
  subFocusAreaUid String
  subFocusArea    FocusArea @relation("subfocusAreas", fields: [subFocusAreaUid], references: [uid], onDelete: Cascade)
}

model TeamFocusAreaVersionHistory {
  id             Int        @id @default(autoincrement())
  uid            String     @unique @default(cuid())
  teamUid        String
  team           Team       @relation(fields: [teamUid], references: [uid])
  teamName       String
  focusAreaUid   String?
  focusArea      FocusArea? @relation(fields: [focusAreaUid], references: [uid])
  focusAreaTitle String?
  modifiedBy     String
  user           Member     @relation(fields: [modifiedBy], references: [uid])
  username       String
  version        Int
  createdAt      DateTime   @default(now())
  modifiedAt     DateTime   @updatedAt

  @@unique([focusAreaUid, teamUid, version])
}

enum ImageSize {
  ORIGINAL
  LARGE
  MEDIUM
  SMALL
  TINY
}
