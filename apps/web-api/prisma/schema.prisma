// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// TODO: User accounts mapped from Clerk
/// TODO: User permissions/grants

model Team {
  id                Int                @id @default(autoincrement())
  uid               String             @unique @default(cuid())
  name              String             @unique
  logo              Image?             @relation(fields: [logoUid], references: [uid])
  logoUid           String?
  blog              String?
  website           String?
  contactMethod     String?
  twitterHandler    String?
  shortDescription  String?
  longDescription   String?
  plnFriend         Boolean
  airtableRecId   String?             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  teamMemberRoles   TeamMemberRole[]
  industryTags      IndustryTag[]
  membershipSources MembershipSource[]
  fundingStage      FundingStage?      @relation(fields: [fundingStageUid], references: [uid])
  fundingStageUid   String?
  technologies      Technology[]
  // To be deprecated in favor of Technology model
  // Remove after Airtable data migration:
  filecoinUser      Boolean
  ipfsUser          Boolean
}

model Member {
  id              Int              @id @default(autoincrement())
  uid             String           @unique @default(cuid())
  name            String           @unique
  email           String?          @unique
  image           Image?           @relation(fields: [imageUid], references: [uid])
  imageUid        String?
  githubHandler   String?
  discordHandler  String?
  twitterHandler  String?
  officeHours     String?
  plnFriend       Boolean
  airtableRecId   String?             @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  skills          Skill[]
  location        Location?        @relation(fields: [locationUid], references: [uid])
  locationUid     String?
  teamMemberRoles TeamMemberRole[]
}

model Skill {
  id          Int      @id @default(autoincrement())
  uid         String   @unique @default(cuid())
  title       String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  members     Member[]
}

model Location {
  id                 Int      @id @default(autoincrement())
  uid                String   @unique @default(cuid())
  placeId            String   @unique
  city               String?
  country            String
  continent          String
  region             String?
  regionAbbreviation String?
  metroArea          String?
  latitude           Float
  longitude          Float
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  members            Member[]

  @@unique([continent, country, region, city, metroArea, latitude, longitude])
}

model TeamMemberRole {
  id        Int       @id @default(autoincrement())
  mainTeam  Boolean
  teamLead  Boolean
  startDate DateTime?
  endDate   DateTime?
  role      String?
  member    Member    @relation(fields: [memberUid], references: [uid])
  memberUid String
  team      Team      @relation(fields: [teamUid], references: [uid])
  teamUid   String

  // One member can only have one role per team
  @@unique([memberUid, teamUid])
}

model IndustryCategory {
  id           Int           @id @default(autoincrement())
  uid          String        @unique @default(cuid())
  title        String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  industryTags IndustryTag[]
}

model IndustryTag {
  id                  Int               @id @default(autoincrement())
  uid                 String            @unique @default(cuid())
  title               String            @unique
  definition          String?
  airtableRecId   String?             @unique
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  industryCategory    IndustryCategory? @relation(fields: [industryCategoryUid], references: [uid])
  industryCategoryUid String?
  teams               Team[]
}

model FundingStage {
  id        Int      @id @default(autoincrement())
  uid       String   @unique @default(cuid())
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teams     Team[]
}

model MembershipSource {
  id        Int      @id @default(autoincrement())
  uid       String   @unique @default(cuid())
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teams     Team[]
}

model Technology {
  id        Int      @id @default(autoincrement())
  uid       String   @unique @default(cuid())
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teams     Team[]
}

model Image {
  id             Int       @id @default(autoincrement())
  uid            String    @unique @default(cuid())
  // The cid is not unique because this id represents an array of multiple images
  // with different sizes that can be accessed trough the cid and filename
  cid            String
  width          Int
  height         Int
  url            String
  filename       String
  size           Int
  type           String
  version        ImageSize
  // This image can be a thumbnail to other image
  thumbnailToUid String?
  thumbnailTo    Image?    @relation("ImageThumbnails", fields: [thumbnailToUid], references: [uid])
  // This image can have multiple thumbnails
  thumbnails     Image[]   @relation("ImageThumbnails")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  // Reverse Relations:
  Team           Team[]
  Member         Member[]
}

enum ImageSize {
  ORIGINAL
  LARGE
  MEDIUM
  SMALL
  TINY
}
