import { Injectable } from '@nestjs/common';
import { File, Web3Storage } from 'web3.storage';

// Explicitly import multer to temporarily fix this issue:
// https://github.com/DefinitelyTyped/DefinitelyTyped/issues/47780
import 'multer';
import { FileEncryptionService } from '../file-encryption/file-encryption.service';
import { AwsService } from '../aws/aws.service';
import { IPFS } from '../constants';

@Injectable()
export class FileUploadService {
  constructor(private fileEcryptionService: FileEncryptionService, private awsService:AwsService) {}

  private makeStorageClient() {
    console.log("Inside makeStorageClient");
    return new Web3Storage({
      token: process.env.WEB3_STORAGE_API_TOKEN || '',
      endpoint: new URL('https://api.web3.storage'),
    });
  }

  private makeFileObjects(files: Array<Express.Multer.File>) {
    return files.map((file) => new File([file.buffer], `${file.originalname}`));
  }

  private encryptFiles(
    files: Array<Express.Multer.File>
  ): Array<Express.Multer.File> {
    console.log("Inside encryptFiles");
    
    return files.map((file) => {
      const eFile = this.fileEcryptionService.getEncryptedFile(file);
      return eFile;
    });
  }

  async storeFiles(uploadedFiles: Array<Express.Multer.File>) {
    if (process.env.FILE_STORAGE === IPFS) {
      console.log("Inside storeFiles");
      const client = this.makeStorageClient();
      const encryptedFiles = this.encryptFiles(uploadedFiles);
      const fileObjects = this.makeFileObjects(encryptedFiles);
      const cid = await client.put(fileObjects);
      console.log("Inside storeFiles");
      return cid;
    } else {
      let response; 
      for (const file of uploadedFiles) {
        if (!response) {
          response = await this.awsService.uploadFileToS3(file, process.env.AWS_S3_BUCKET_NAME , file.originalname);
        } else {
          await this.awsService.uploadFileToS3(file, process.env.AWS_S3_BUCKET_NAME , file.originalname);
        }
      } 
      return response.Location;
    }
  }

  async getDecryptedFileUrl(cid: string, filename: string) {
    console.log("Inside getDecryptedFileUrl");
    // Construct the actual file URL that is generated by our cloudflare worker
    const fileURL = `${process.env.WORKER_IMAGE_URL}/${cid}/${filename}`;

    return fileURL;
  }
}
